image: docker:latest
services:
- docker:dind

variables:
  DOCKER_DRIVER: overlay

stages:
- build
- test
#- package

maven-build:
  before_script:
  - apt-get update
  # - apt-get install mvn
  #  - apt-get install -y openjfx
  image: maven:3.6.1-jdk-11
  stage: build
  script: "mvn package -B"
  artifacts:
    paths:
    - target/*.jar

#docker-build:
#  stage: package
#  script:
#  - docker build -t registry.gitlab.com/oslomet-abi/nikita-noark5-core .
#  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#  - docker push registry.gitlab.com/oslomet-abi/nikita-noark5-core

code_quality:
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
  - docker:stable-dind
  script:
  - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
  - docker run
      --env SOURCE_CODE="$PWD"
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    paths: [gl-code-quality-report.json]

dast:
  stage: test
  image: registry.gitlab.com/gitlab-org/security-products/zaproxy
  variables:
    website: "https://example.com"
  allow_failure: true
  script:
  - mkdir /zap/wrk/
  - /zap/zap-baseline.py -w gl-dast-report.md -t $website || true
  - cp /zap/wrk/gl-dast-report.md .
  artifacts:
    paths: [gl-dast-report.json]

#sast:
#  image: docker:stable
#  variables:
#    DOCKER_DRIVER: overlay2
#  allow_failure: true
#  services:
#  - docker:stable-dind
#  script:
#  - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
#  - docker run
#      --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}"
#      --volume "$PWD:/code"
#      --volume /var/run/docker.sock:/var/run/docker.sock
#      "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
#  artifacts:
#    paths: [gl-sast-report.json]

dependency_scanning:
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
  - docker:stable-dind
  script:
  - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
  - docker run
      --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
      --volume "$PWD:/code"
      --volume /var/run/docker.sock:/var/run/docker.sock
      "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
  artifacts:
    paths: [gl-dependency-scanning-report.json]

#container_scanning:
#  image: docker:stable
#  variables:
#    DOCKER_DRIVER: overlay2
#    ## Define two new variables based on GitLab's CI/CD predefined variables
#    ## https://docs.gitlab.com/ee/ci/variables/#predefined-variables-environment-variables
#    CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
#    CI_APPLICATION_TAG: $CI_COMMIT_SHA
#  allow_failure: true
#  services:
#  - docker:stable-dind
#  script:
#  - docker run -d --name db arminc/clair-db:latest
#  - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
#  - apk add -U wget ca-certificates
#  - docker pull ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}
#  - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
#  - mv clair-scanner_linux_amd64 clair-scanner
#  - chmod +x clair-scanner
#  - touch clair-whitelist.yml
#  - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
#  - retries=0
#  - echo "Waiting for clair daemon to start"
#  - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
#  - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG} || true
#  artifacts:
#    paths: [gl-container-scanning-report.json]
